第6次作业要求：

部分术语：本*作业要求*中所使用的部分术语的简单注释说明。
          1. 本说明不严格区分”结点“与”结点数据域所包含的值“的称谓
          2. 在讨论时间复杂度问题时通常用 N 表示数据集的规模
          3. 用例 - 应用场景案例

-----------------------------------------------------------------------------------------
任务一：
-----------------------------------------------------------------------------------------
目    的：建立 左式堆/斜堆(任选) 的C++类 - 基于C++11语言规范标准
          为简单起见，以下用 堆 来指代上述数据结构

类 型 名：leftistheap 或 lheap / skewheap 或 sheap (建议)
          为简单起见，以下用 HEAP 来指代上述类型名

基本架构：
          1. 构造函数
             (1) 默认构造
                 用例1：HEAP<T> h;
                 用例2: vector<HEAP<T>> v(3);
                 用例3: HEAP<T> a[3];
                 用例4: HEAP<T>* p = HEAP<T>[3];
             (2) 序列构造 (建议)
                 用例1: T a[10];
                        ...
                        HEAP<T> h(a,a+10);
                 用例2: vector<T> a(10);
                        ...
                        HEAP<T> h(a.begin(),a.end());
                 用例3: list<T> a(10);
                        ...
                        HEAP<T> h(a.begin(),a.end());
             (3) 复制构造
                 用例1：HEAP<T> h1;
                        ...
                        HEAP<T> h2(h1);
                 用例2: void f(HEAP<T> h) { ... }
                        ...
                        HEAP<T> h;
                        ...
                        f(h);
             (4) 移动构造
                 用例1：HEAP<T> h1;
                        ...
                        HEAP<T> h2(std::move(h1));
                 用例2: HEAP<T> f() { ... }
                        ...
                        HEAP<T> h;
                        ...
                        h = f();
             (5) 初始化表构造
                 用例1：HEAP<T> h = { ... };
                 用例2: void f(HEAP<T> h) { ... }
                        ...
                        f({...});
          2. 析构函数
          3. 赋值运算重载
             (1) 复制赋值
                 用例1：HEAP<T> h1, h2;
                        ...
                        h1 = h2;
             (2) 移动赋值
                 用例1：HEAP<T> h1, h2;
                        ...
                        b1 = std::move(h2);
                 用例2: HEAP<T> f() { ... }
                        ...
                        HEAP<T> h;
                        ...
                        h = f();
             (3) 序列赋值 (建议)
                 用例1: vector<T> a(10);
                        ...
                        HEAP<T> h;
                        ...
                        h = a;
                 用例2: list<T> a(10);
                        ...
                        HEAP<T> h;
                        ...
                        h = a;
             (4) 初始化表赋值
                 用例1：HEAP<T> h;
                        ...
                        h = { ... };
          4. 基本函数
             (1) size_type size () const;
                 返回指定堆的结点个数
             (2) bool empty() const;
                 判定指定堆是否为空堆，若肯定，返回true，否则返回false

功能要求：能够对一个给定的堆进行*查询/插入/删除*操作。
          1. 查询函数：返回指定堆的最小值
             (1) const T& findmin() const; 或 const T& min() const; 或 const T& top() const;
                 建议：如果空堆时抛出异常
             (2) T& findmin(); 或 T& min(); 或 T& top();
                 (同上)
          2. 插入函数：在保持堆序性的前提下将新元素加入堆中
             (1) void insert(const T&  x); 或 void push(const T&  x);
             (2) void insert(      T&& x);    void push(      T&& x);
          3. 删除函数：删除指定堆的最小元
             (1) void delmin(    ); 或 void pop();
             (2) void delmin(T& x); 或 void pop(T&);
             建议：不考虑空堆异常情况
          4. 堆交换函数：交换当前堆与参数指定的堆
             (1) void swap(HEAP<T>&);
                 

性能要求：各种操作符合指定的时间复杂度。
          1. 默认构造/移动构造/移动赋值/基本函数/查询/swap  - O(1)
          2. 序列构造/序列赋值                              - O(序列长度)
          3. 复制构造/复制赋值/初始化表构造/初始化表赋值    - O(参数对象包含的元素个数)
          4. 插入/删除                                      - O(logN)

测试要求：检查所实现 HEAP类 的对象是否具备上述要求的功能和性能。

-----------------------------------------------------------------------------------------
任务二：
-----------------------------------------------------------------------------------------
目    的：建立 二项队列 的C++类 - 基于C++11语言规范标准

类 型 名：bqueue (建议)

基本架构：
          1. 构造函数
             (1) 默认构造
                 用例1：bqueue<T> h;
                 用例2: vector<bqueue<T>> v(3);
                 用例3: bqueue<T> a[3];
                 用例4: bqueue<T>* p = bqueue<T>[3];
             (2) 序列构造 (建议)
                 用例1: T a[10];
                        ...
                        bqueue<T> h(a,a+10);
                 用例2: vector<T> a(10);
                        ...
                        bqueue<T> h(a.begin(),a.end());
                 用例3: list<T> a(10);
                        ...
                        bqueue<T> h(a.begin(),a.end());
             (3) 复制构造
                 用例1：bqueue<T> h1;
                        ...
                        bqueue<T> h2(h1);
                 用例2: void f(bqueue<T> h) { ... }
                        ...
                        bqueue<T> h;
                        ...
                        f(h);
             (4) 移动构造
                 用例1：bqueue<T> h1;
                        ...
                        bqueue<T> h2(std::move(h1));
                 用例2: bqueue<T> f() { ... }
                        ...
                        bqueue<T> h;
                        ...
                        h = f();
             (5) 初始化表构造
                 用例1：bqueue<T> h = { ... };
                 用例2: void f(bqueue<T> h) { ... }
                        ...
                        f({...});
          2. 析构函数
          3. 赋值运算重载
             (1) 复制赋值
                 用例1：bqueue<T> h1, h2;
                        ...
                        h1 = h2;
             (2) 移动赋值
                 用例1：bqueue<T> h1, h2;
                        ...
                        b1 = std::move(h2);
                 用例2: bqueue<T> f() { ... }
                        ...
                        bqueue<T> h;
                        ...
                        h = f();
             (3) 序列赋值 (建议)
                 用例1: vector<T> a(10);
                        ...
                        bqueue<T> h;
                        ...
                        h = a;
                 用例2: list<T> a(10);
                        ...
                        bqueue<T> h;
                        ...
                        h = a;
             (4) 初始化表赋值
                 用例1：bqueue<T> h;
                        ...
                        h = { ... };
          4. 基本函数
             (1) size_type size () const;
                 返回指定二项队列的结点个数
             (2) bool empty() const;
                 判定指定二项队列是否为空堆。若肯定，返回true，否则返回false

功能要求：能够对一个给定的二项队列进行*查询/插入/删除*操作。
          1. 查询函数：返回指定二项队列的最小值
             (1) const T& findmin() const; 或 const T& min() const; 或 const T& top() const;
                 建议：如果二项队列为空时抛出异常
             (2) T& findmin(); 或 T& min(); 或 T& top();
                 (同上)
          2. 插入函数：在保持堆序性的前提下将新元素加入二项队列中。
             (1) void insert(const T&  x); 或 void push(const T&  x);
             (2) void insert(      T&& x);    void push(      T&& x);
          3. 删除函数：删除指定二项队列的最小元
             (1) void delmin(    ); 或 void pop();
             建议：不考虑二项队列为空时的异常情况
             (2) void delmin(T& x); 或 void pop(T&);
             建议：考虑二项队列为空时的异常情况
          4. 二项队列交换函数：
             (1) void swap(bqueue<T>&);
                 交换当前二项队列与参数指定的二项队列

性能要求：各种操作符合指定的时间复杂度。
          1. 默认构造/移动构造/移动赋值/基本函数/swap       - O(1)
          2. 序列构造/序列赋值                              - O(序列长度)
          3. 复制构造/复制赋值/初始化表构造/初始化表赋值    - O(参数对象包含的元素个数)
          4. 查询/插入/删除                                 - O(logN)

测试要求：检查所实现 bqueue类 的对象是否具备上述要求的功能和性能。

