#include"djset.h"
#include<iostream>
#include<cstdio>
using namespace std;
int main()
{
    int N=0;
    int M=0;
    int a=0;
    int b=0;
    cout<<"输入N和M:";
    cin>>N>>M;
    djset Myset(N+1);
    // Myset.print_father();
    cout<<"输入每一条边：";
    for(int i=0 ; i<M ; i++)
    {
        cin>>a>>b;
        Myset.unionSets(a,b);
    }
    // Myset.print_father();
    bool flag[N+1] = {0};
    for(int i=1 ; i<=N ; i++)
    {
        if(flag[i] == true) continue;
        else
        {
            for(int j=i ; j<=N ; j++)
            {
                if(flag[j] == true) continue;
                if(Myset.find(j) == i)
                {
                    flag[j] = true;
                    cout<<j<<" ";
                }
            }
            cout<<endl;
        }
    }
}

/****************************************************************************************
-----------------------------------------------------------------------------------------
任务二：实现 “计算无向图的连通分支” 算法
-----------------------------------------------------------------------------------------
目    的：对于给定标号为 1, 2, ..., N 的 N 个顶点的无向图，计算其所有连通分支。

数据规格：
 1. 输入：输入数据由两部分组成
          第一部分包含两个非负整数 N、M，其中 N 为给定无向图顶点个数，M 为无向图的边数
          第二部分有 M 对不超过 N 的正整数 x、y，表示顶点 x 与顶点 y 之间有边
 2. 输出：对于给定的输入数据，输出 k 行正整数，k 是给定无向图的连通分支数
          每行的正整数是一个连通分支的顶点标号，这些整数之间由一个空格分隔

数据样例：
输入:
5 3
1 2 3 4 3 5
输出：(注意，输出不唯一)
1 2
3 4 5
****************************************************************************************/